name: Action Sample

on:
  push:
    branches:
      - main
  # schedule:
  #   - cron: '*/5 * * * *' # ５分ごと
  # Github Actionsワークフローをコードレベルで起動するには、workflow_dispatchトリガーを使用する必要があります。
  workflow_dispatch:

# Settingsを扱えるのは、リポジトリのオーナーのみ
# run内に書いたスクリプトでsecretが扱えるようになる
# https://qiita.com/developer-kikikaikai/items/60b209c065f076dca7a1
env:
  project_id: ${{ secrets.GCP_PROJECT_ID }}         # GCPのプロジェクトID
  service_account_key: ${{ secrets.GCP_SA_KEY }}    # GCPのサービスアカウント

jobs:
  python-Sample:
    runs-on: ubuntu-latest
    steps:

      - name: Access the repo
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.7'
          architecture: 'x64'

      - name: Install necessary libraries
        run: |
          python -m pip install --upgrade pip
          pip install -r etc/requirements.txt



      # デバッグ中は消す ###################################################
      - name: Run Python make_regression
        run: |
            echo $service_account_key | base64 --decode > ./credential.json   # base64 のデータをデコードしてクレデンシャル情報を復元する(https://soypocket.com/it/github-actions-json-secrets/)
            export GOOGLE_APPLICATION_CREDENTIALS="./credential.json"         # デコードしたクレデンシャル情報をセットする
            python make_regression.py                                         # スクリプト実行

      - name: Run Python missing_value_completion
        run: |
            sleep 5s                                                          # 5秒後に実行する
            export GOOGLE_APPLICATION_CREDENTIALS="./credential.json"         # 同じ処理をしないといけない。もっと良いやり方はありそう
            python missing_value_completion.py                                # スクリプト実行

      # 初回はこれを実行してモデルを保存する
      # 一回やったらコメントアウトする
      - name: Run Python GaussianProcessRegressor_first_training
        env:
          ON_RETRAIN_MODE: False
        run: |
            sleep 5s                                                          # 5秒後→1日後に実行する
            echo $service_account_key | base64 --decode > ./credential.json   # ここは後で消す
            export GOOGLE_APPLICATION_CREDENTIALS="./credential.json"         # 同じ処理をしないといけない。もっと良いやり方はありそう
            python src/ml/training.py                                         # スクリプト実行
            rm credential.json                                                # 間違ってPUSHしないようにクレデンシャルファイルは削除する

      # これはいらない。本番環境の GCE で Docker RUN する？
      # - name: Run Docker Container Deployment
      #   run: |
      #       sleep 5s                                                          # 5秒後
      #       docker-compose up --build                                         # docker-compose を使ってビルドする。ビルドすると自動的にユニコーンサーバが立ち上がりAPIが起動する

      - name: Run Python GaussianProcessRegressor_predict
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: |
            sleep 5s                                                          # 5秒後→1日後に実行する(？)
            echo $service_account_key | base64 --decode > ./credential.json   # ここは後で消す
            export GOOGLE_APPLICATION_CREDENTIALS="./credential.json"         # 同じ処理をしないといけない。もっと良いやり方はありそう
            python src/ml/predict.py                                          # スクリプト実行
            rm credential.json                                                # 間違ってPUSHしないようにクレデンシャルファイルは削除する

      - name: Files commit
        run: |
            git config --global user.email ${{secrets.EMAIL}}
            git config --global user.name ${{secrets.NAME}}
            git add -A
            git commit -m "add Files"
            git push origin main