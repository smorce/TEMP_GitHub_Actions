# GitHubリポジトリのファイルを使用したDockerイメージの作成。
# DockerイメージをGoogleCloudContainerRegistryにアップロードします。
# KubernetesまたはCloudRunのいずれかのGoogleCloudサービスでのDockerイメージのデプロイ（この場合は後者を使用します）。

# すべてのビルドを対象に次のデフォルトの置換が用意されています。
# $PROJECT_ID: Cloud プロジェクトの ID
# $BUILD_ID: ビルドの ID
# $PROJECT_NUMBER: プロジェクトの番号
# $LOCATION: ビルドに関連付けられたリージョン

# トリガーによって呼び出されるビルドを対象に次のデフォルトの置換が用意されています。
# $TRIGGER_NAME: トリガーに関連付けられた名前
# $COMMIT_SHA: ビルドに関連付けられた commit ID
# $REVISION_ID: ビルドに関連付けられた commit ID
# $SHORT_SHA: COMMIT_SHA の最初の 7 文字
# $REPO_NAME: リポジトリの名前
# $BRANCH_NAME: ブランチの名前
# $TAG_NAME: タグの名前

# Cloud Build とは？
# Cloud BuildとはCI/CDを簡単にできるGCPのサービスです。
# 似たようなサービスとしてはGitHub Actions, CircleCI, AWS CodeBuild等があります。
# ビルド、テスト、デプロイなどを実行してくれる従量課金制なビルドサービスです。
# マシンタイプを指定しなかった場合のデフォルト指定である、n1-standard-1インスタンスに限っては、1日当たり最初の120分のビルドについては無料で利用することができます。
# 無料枠を超過した分については、1分当たり$0.003と非常に安く設定されています。
# 各ビルドステップはDockerコンテナで実行され、Dockerイメージは公式ビルダー や cloud-builders-community もあるので必要に応じて使うことができます。
# Cloud Build は、以下のサービスに対してデプロイを行うことができます。
  # Cloud Run
  # Cloud Functions
  # GKE
  # App Engin
  # Firebase

# Cloud Build は、特別なサービス アカウントを使用してユーザーの代わりにビルドを実行します。
# Cloud Build サービス アカウントにタスクの実行に必要な権限が付与されていない場合は、次のエラーが表示されます。
# Missing necessary permission iam.serviceAccounts.actAs for [USER] on the service account
# [CLOUD_BUILD_SERVICE_ACCOUNT]@PROJECT.iam.gserviceaccount.com

# Cloud Run とは？
# 自分で作ったコンテナを、Googleが用意したサーバー環境上で動かすことができます。
# http(s) の口を持ったWebサイト/Web APIサーバーを手軽に作れて、スケーリングも勝手に面倒見てくれます。


# デフォルトは cloudbuild.yaml ですが、ビルドコマンド実行時にオプション -config で任意のファイル名を指定することも可能です。
# cloudbuild.yaml は ソースの一番上の階層のディレクトリ直下に作成してください。
# Cloud Build は cloudbuild.yaml があるディレクトリ上で処理を実行することになります。

# Container Registry のタグは以下の構成となっています。コンテナイメージの名前は自分で決める
# gcr.io/プロジェクトID/コンテナイメージの名前

# ★「github.com/smorce/temp-github-actions」→他のブログでは「temp-github-actions」としている
# ★「github.com/smorce/temp-github-actions」がイメージ名っぽい。自由に決められるからこれで問題なさそう

# Google Cloud Build
steps:
# Dockerビルド(Dockerイメージの作成)
- name: 'gcr.io/cloud-builders/docker'
  # dir で指定したディレクトリにあるDockerfileを対象
  dir: "docker"
  # gcr.io/$PROJECT_ID/{image名} というイメージを作成　 docker run から {image名}=temp-github-actions かも？
  # github.com/{github_user}/{repo}
  # 必須ではありませんが、自動ビルドの場合はどのコミットに対して作成されたイメージなのかを判別するために、コミットハッシュをタグ名(:$SHORT_SHA)にするとわかりやすくなります。
  # -t コマンドでタグの設定をします。
  args: [
    'build',
    '-t', 'gcr.io/$PROJECT_ID/github.com/smorce/temp-github-actions:$SHORT_SHA', '.']
# Dockerイメージを Container Registry へ Push
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'push',
    'gcr.io/$PROJECT_ID/github.com/smorce/temp-github-actions:$SHORT_SHA']
# Container Registory へ Push した Dockerイメージ を Cloud Run(GCPのフルマネージドのサーバーレスプラットフォーム) へデプロイ
# beta と書いてあるので新しい機能っぽい
- name: 'gcr.io/cloud-builders/gcloud'
  args: [
    'beta',                  # なくても良さそう
    'run',
    'deploy',
    'temp-github-actions',   # これで合ってるっぽい。多分、リソース名。
    '--port=4200',           # 追加してみたけど、いらない？ Dockerファイルで書いてあるからいらないかな？
    '--image=gcr.io/$PROJECT_ID/github.com/smorce/temp-github-actions:$SHORT_SHA',
    '--region=us-west1',     # europe-west1 から オレゴン us-west1 に変更。Cloud Build も us-west1 にした　→　この指定は外した方が良い？ あっても大丈夫そう。一旦このままで
    '--platform=managed']


# Container Registryにpush
# 最後の images を書くことで Container Registryにpushできます。不要だったら記載する必要はありません。←★教科書には書いていない
# images: ['gcr.io/$PROJECT_ID/github.com/smorce/temp-github-actions:$SHORT_SHA']

